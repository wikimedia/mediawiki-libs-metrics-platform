import Foundation

/// Base class for a Metrics Client event.
public class Event: Encodable {
    /**
     * Schema to which this event conforms.
     */
    var schema: String

    /**
     * Metadata used primarily by the event platform on event intake
     */
    var meta: Meta

    /**
     * App install ID generated by the host application. This is attached to outgoing events
     * by the metrics client library.
     */
    var appInstallId: String?

    /**
     * Session ID, provided and managed by the metrics client library via the SessionController class.
     *
     * A session starts when the app launches or is resumed after more than 15 minutes of inactivity.
     * A session ends when the app shuts down or has been inactive for more than 15 minutes.
     */
    var appSessionId: String?

    /**
     * Records when the event was generated. Managed by the client library.
     *
     * N.B. This is distinct from `meta.dt`, which is set by the event intake service
     * and is used as "timestamp of reception" for partitioning the events in the database.
     *
     * See Phab:T240460 for more information.
     */
    var dt: String?

    var pageData: PageData?
    var userData: UserData?
    var deviceData: DeviceData?
    var accessMethod: String?
    var platform: String?
    var platformFamily: String?
    var isProduction: Bool?

    init(stream: String, schema: String) {
        self.schema = schema
        self.meta = Meta(stream: stream)
    }

    enum CodingKeys: String, CodingKey {
        case schema = "$schema"
        case meta
        case appInstallId = "app_install_id"
        case appSessionId = "app_session_id"
        case dt
        case pageData = "page"
        case userData = "user"
        case deviceData = "device"
        case accessMethod = "access_method"
        case platform
        case platformFamily = "platform_family"
        case isProduction = "is_production"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        do {
            try container.encode(meta, forKey: .meta)
            try container.encode(appInstallId, forKey: .appInstallId)
            try container.encode(appSessionId, forKey: .appSessionId)
            try container.encode(dt, forKey: .dt)
            try container.encode(schema, forKey: .schema)
            try container.encodeIfPresent(pageData, forKey: .pageData)
            try container.encodeIfPresent(userData, forKey: .userData)
            try container.encodeIfPresent(deviceData, forKey: .deviceData)
            try container.encodeIfPresent(accessMethod, forKey: .accessMethod)
            try container.encodeIfPresent(platform, forKey: .platform)
            try container.encodeIfPresent(platformFamily, forKey: .platformFamily)
            try container.encodeIfPresent(isProduction, forKey: .isProduction)
        } catch let error {
            NSLog("EPC: Error encoding event body: \(error)")
        }
    }

    struct Meta: Encodable {
        var stream: String

        /**
         * meta.id is *optional* and should only be done in case the client is
         * known to send duplicates of events, otherwise we don't need to
         * make the payload any heavier than it already is
         */
        var id: String?
        var domain: String?

        enum CodingKeys: String, CodingKey {
            case stream
            case id
            case domain
        }

        func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            do {
                try container.encode(stream, forKey: .stream)
                try container.encodeIfPresent(id, forKey: .id)
                try container.encodeIfPresent(domain, forKey: .domain)
            } catch let error {
                NSLog("EPC: Error encoding event body: \(error)")
            }
        }
    }
}
