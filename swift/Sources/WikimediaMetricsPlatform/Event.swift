import Foundation

/**
 * Represents all events that  are dispatched by the Metrics Platform Client (MPC).
 */
public class Event: Encodable {
    var schema: String = "/analytics/mediawiki/client/metrics_event/1.1.0"

    /**
     * Metadata about the event used by EventGate.
     */
    var meta: Meta

    /**
     * The ISO 8601 timestamp of when the event was created.
     *
     * N.B. This is distinct from `meta.dt`, which is set by EventGate and is used as "timestamp of
     * reception". See https://phabricator.wikimedia.org/T240460 for more detail.
     */
    var dt: Date;
    
    /**
     * The name of the event.
     */
    var name: String
    
    var agent: Agent
    var page: Page?
    var mediawiki: MediaWiki?
    var performer: Performer?
    var customData: [String: [String: String]]?
    
    init(stream: String, name: String) {
        self.meta = Meta(stream: stream)
        self.name = name
        self.agent = Agent()
        self.dt = Date()
    }

    enum CodingKeys: String, CodingKey {
        case schema = "$schema"
        
        case meta
        case dt
        case agent
        case page
        case performer
        case customData
    }
    
    class Meta: Encodable {
        var stream: String

        /// `id` should only be done in case the client is known to send duplicate events.
        //var id: String?
        
        var domain: String?
        
        init(stream: String) {
            self.stream = stream
        }
    }
    
    class Agent: Encodable {
        
        /**
         * Install ID generated by the embedding app.
         */
        var appInstallId: String?
        
        
        var clientPlatform: String = "ios"
        var clientPlatformFamily: String = "app"
    }

    class Page: Encodable {
        var id: Int?
        var title: String?
        var namespace: Int?
        var namespaceName: String?
        var revisionId: Int?
        var wikidataId: String?
        var contentLanguage: String?
        var isRedirect: Bool?
        var userGroupsAllowedToMove: [String]?
        var userGroupsAllowedToEdit: [String]?
    }
    
    class MediaWiki: Encodable {
        var skin: String?
        var version: String?
        var isProduction: Bool?
        var isDebugMode: Bool?
        var database: String?
        var siteContentLanguage: String?
        var siteContentLanguageVariant: String?
    }

    class Performer: Encodable {
        var isLoggedIn: Bool?
        var id: Int?
        var name: String?
        
        /**
         * Session ID, provided and managed by the MPC via `SessionController`.
         */
        var sessionId: String?
        
        var pageviewId: String?
        var groups: [String]?
        var isBot: Bool?
        var language: String?
        var languageVariant: String?
        var canProbablyEditPage: Bool?
        var editCount: Int?
        var editCountBucket: String?
        var registrationDt: Date?
    }
}
