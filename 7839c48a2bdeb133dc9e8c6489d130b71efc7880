{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bb8842ba_54fc72ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1196
      },
      "writtenOn": "2022-10-05T13:35:24Z",
      "side": 1,
      "message": "Thanks!!!",
      "revId": "7839c48a2bdeb133dc9e8c6489d130b71efc7880",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8ea2254_d50c9253",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 2974
      },
      "writtenOn": "2022-10-05T15:11:44Z",
      "side": 1,
      "message": "See comment inline. This CR does fix the concurrency issue, but we can probably do a bit better. Concurrency is hard!",
      "revId": "7839c48a2bdeb133dc9e8c6489d130b71efc7880",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a0f76b1_cf6822fc",
        "filename": "java/src/main/java/org/wikimedia/metrics_platform/MetricsClient.java",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 2974
      },
      "writtenOn": "2022-10-05T15:11:44Z",
      "side": 1,
      "message": "Extracting a method solves the concurrency issue (if you want more reading, good example of why and how this breaks: https://stackoverflow.com/questions/4021151/java-dateformat-is-not-threadsafe-what-does-this-leads-to). But now we create a new SimpleDateFormat each time it is invoked. A better solution is probably to use DateTimeFormatter, which was introduced in Java 8 and is immutable and threadsafe. See: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html",
      "range": {
        "startLine": 157,
        "startChar": 28,
        "endLine": 157,
        "endChar": 44
      },
      "revId": "7839c48a2bdeb133dc9e8c6489d130b71efc7880",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951"
    }
  ]
}